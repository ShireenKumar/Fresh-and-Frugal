import { User, createUserWithEmailAndPassword, onAuthStateChanged, signInWithEmailAndPassword, signInWithPopup, signOut } from "firebase/auth";
import { createContext, useContext, useEffect, useState } from "react";
import { auth } from "../firebaseConfig";
import { GoogleAuthProvider } from "firebase/auth/web-extension";
import { getFirestore, doc, setDoc , getDoc} from "firebase/firestore";


interface IUserAuthProviderProps{
    children: React.ReactNode
}

type AuthContextData = {
    user: User | null;
    logIn:typeof logIn;
    signUp: typeof signUp;
    logOut: typeof logOut;
    googleSignIn: typeof googleSignIn;
};

const logIn = (email: string, password: string) => {
    signInWithEmailAndPassword(auth, email, password);
};

// const signUp = (email: string, password: string) => {
//    return createUserWithEmailAndPassword(auth, email, password)
// };

// const signUp = async (email : string, password: string) => {
//     createUserWithEmailAndPassword(auth, email, password).then(
//         async (result) => {
//             console.log(result)

//             const userID = result.user.uid;
//             const userName = email;

//             const userData = {
//                 name: userName,
//                 userID: userID,
//                 pantries: []
//             }

//             try {
//                 const docRef = await setDoc(doc(db, "Users", userID),userData );
//             }
//         }
//     )

// }

const signUp = async (email: string, password: string) => {
    try {
      // Create a new user with email and password
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      
      // Get the User ID (UID)
      const userID = userCredential.user.uid;
      console.log("THIS IS THE USERID IF THIS IS WORKING CORRECTLY YOU SOULD SEE THIS FUCKSHITBALLS" , userID)
      const db = getFirestore();
      
    //   // Prepare the user data to store in Firestore
    //   const userData = {
    //     name: email, // Using the email as the user's name
    //     userID: userID, // Autogenerated user ID
    //     pantries: [] // Initialize pantries as an empty array
    //   };
  
      // Save user data to Firestore
      await setDoc(doc(db, "Users", userID), {
        name: email, // Using the email as the user's name
        userID: userID, // Autogenerated user ID
        pantries: [] // Initialize pantries as an empty array
      } );
      
      console.log("ur shit finall fucking saved");
  
    } catch (error) {
      // Handle any errors
      console.log("YOUR DOC WAS NOT WRITTEN PROPERLY SOMETHING GOT RLLY FUCKED UP GET UR SHIT TOGETHER");
    }
  };

const logOut = () => {
    return signOut(auth);
}; 

const googleSignIn = () =>{
    const googleAuthProvider = new GoogleAuthProvider();
    return signInWithPopup(auth,googleAuthProvider);
};

export const userAuthContext = createContext<AuthContextData>({
    user: null,
    logIn,
    signUp,
    logOut,
    googleSignIn,

})


export const UserAuthProvider: React.FunctionComponent<
  IUserAuthProviderProps
> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      console.log("I am in useEffect and user is : ", user);
      if (user) {
        console.log("The logged in user state is : ", user);
        setUser(user);
      }

      return () => {
        unsubscribe();
      };
    });
  });
  const value: AuthContextData = {
    user,
    logIn,
    signUp,
    logOut,
    googleSignIn,
  };
  return (
    <userAuthContext.Provider value={value}>
      {children}
    </userAuthContext.Provider>
  );
};

export const useUserAuth = () => {
    return useContext(userAuthContext);
};